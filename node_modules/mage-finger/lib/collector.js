
var url = require('url');

exports.version = '0.1.0';

exports.collector = function(target, options) {
    this.target = target;
    this.options = options;
    var results = [];

    // List all tests here
    this.fingers = [ 'release-notes', 'dummy1', 'dummy2', 'req-by-module' ]

    // Run tests
    this.finger = function() {
        var target = url.parse(this.target);

        for (var i in this.fingers) {
            var code = this.fingers[i];
            // bind method to this instance using a closure
            require('./fingers/' + code).run(target, (function(closure){
                return function(){closure._testComplete.apply(closure, arguments)}
            })(this));
        }
    }

    // Internal callback when a test is completed
    this._testComplete = function(finger, versions) {
        results.push({'code': finger, 'versions': versions});
        if (typeof this.options.testcomplete == 'function') {
            this.options.testcomplete(finger, versions);
        }

        if (results.length == this.fingers.length) {
            this._allComplete(results);
        }
    }

    // Internal callback when all tests are completed
    this._allComplete = function(results) {
        var results = _processResults(results);
        if (typeof this.options.allcomplete == 'function') {
            this.options.allcomplete(results);
        }
    }

    // Internal method to summarize and sort the results
    var _processResults = function(results) {
        var tmp = {};
        var total = 0;
        var bymodule = {};
        var code, version;
        if (results.length) {
            for (var i = 0; i < results.length; i++) {
                code = results[i].code;
                if (results[i].versions && results[i].versions.length) {
                    for (var j = 0; j < results[i].versions.length; j++) {
                        version = results[i].versions[j];
                        if (typeof tmp[version] == 'undefined') {
                            tmp[version] = 0;
                        }
                        if (typeof bymodule[version] == 'undefined') {
                            bymodule[version] = [];
                        }
                        tmp[version]++;
                        bymodule[version].push(code)
                        total++;
                    }
                }
            }
        }
        var out = [];
        var percent;
        for (version in tmp) {
            percent = 100 / total * tmp[version];
            out.push({'version': version, 'score': tmp[version], 'percent': percent, 'tests': bymodule[version]});
        }
        return out.sort(_sortResults);
    }

    var _sortResults = function(a, b)
    {
        if (a.score == b.score) {
            if (a.version == b.version) return 0;
            if (a.version > b.version) return -1
            return 1;
        }
        if (a.score > b.score) return -1;
        return 1;
    }
}
